#ggtitle(paste0("Restricted clinical annotation"))+
scale_fill_brewer(palette="Set1",drop=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 6)
### look at resistance markers in primary vs. met
cType.primary.met.resistance <- aa.genome.exahustive %>%
dplyr::filter(actionability.summary=="Therapy resistance",
cancerTypeMatch == TRUE,
!is.na(cancerTypeMatch),
clinical.evidence.summary=="High Confidence") %>%
dplyr::group_by(SAMPLE_TYPE,ONCOTREE_CODE) %>%
dplyr::summarize(n.patients.matched=dplyr::n_distinct(Tumor_Sample_Barcode)) %>%
dplyr::arrange(desc(n.patients.matched))
# cType.sample.counts.primary.met <- svCompiled %>%
#   dplyr::group_by(SAMPLE_TYPE,ONCOTREE_CODE) %>%
#   dplyr::summarise(n.patients=dplyr::n_distinct(Tumor_Sample_Barcode)) %>%
#   dplyr::arrange(desc(n.patients)) %>%
#   data.frame()
highCntsSamples <- cType.sample.counts[cType.sample.counts$n.patients.total>100,]
cTypeSummaryPrimaryMetResistance <- cType.primary.met.resistance %>%
dplyr::filter(ONCOTREE_CODE %in% highCntsSamples$ONCOTREE_CODE) %>%
dplyr::left_join(cType.sample.counts.primary.met,by=c("ONCOTREE_CODE","SAMPLE_TYPE")) %>%
dplyr::left_join(ot_code_full[,c("ot_code","ot_name")],by=c("ONCOTREE_CODE"="ot_code")) %>%
dplyr::filter(SAMPLE_TYPE %in% c("Primary","Metastasis")) %>%
dplyr::mutate(percPatientsMatched=100*round(n.patients.matched/n.patients,3),
patientsRestricted=paste0(n.patients.matched," (",percPatientsMatched,"%)")) %>%
dplyr::arrange(desc(percPatientsMatched)) %>%
data.frame() #%>%
cTypeSummaryPrimaryMetResistance$ot_name <- factor(cTypeSummaryPrimaryMetResistance$ot_name,
levels=unique(cTypeSummaryPrimaryMetResistance$ot_name))
#cTypeSummaryPrimaryMetResistance$ONCOTREE_CODE <- factor(cTypeSummaryPrimaryMetResistance$ONCOTREE_CODE,
#                                                         levels=unique(cTypeSummaryPrimaryMetResistance$ONCOTREE_CODE))
outF <-  paste0(outDir,"/cancer_type_resistance_primary_met_perc.pdf")
ggplot(cTypeSummaryPrimaryMetResistance,aes(y=ot_name,x=percPatientsMatched,fill=SAMPLE_TYPE))+
geom_bar(stat = "identity", position = "dodge",alpha=.6) +
theme_bw()+
#geom_text(aes(label = significance_str, y = value + 5))+
#facet_grid(match_type~.,scale="free_y",)+
xlab("Oncotree Code")+
xlab("percent of patients")+
xlim(c(0,60))+
#ggtitle(paste0("Restricted clinical annotation"))+
scale_fill_brewer(palette="Set2",drop=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 8,width = 8)
### resistance markers primary vs. met
AAChange.primary.met.resistance <- aa.genome.exahustive %>%
dplyr::filter(actionability.summary=="Therapy resistance",
cancerTypeMatch == TRUE,
!is.na(cancerTypeMatch),
clinical.evidence.summary=="High Confidence") %>%
dplyr::group_by(SAMPLE_TYPE,Hugo_Symbol,AAChange) %>%
dplyr::summarize(n.patients.matched=dplyr::n_distinct(Tumor_Sample_Barcode)) %>%
dplyr::arrange(desc(n.patients.matched))
sampleTypeCnt <- aa.genome.exahustive %>%
dplyr::group_by(SAMPLE_TYPE) %>%
dplyr::summarize(n.patients=dplyr::n_distinct(Tumor_Sample_Barcode)) %>%
dplyr::arrange(desc(n.patients))
AAChangePrimaryMetResistance <- AAChange.primary.met.resistance %>%
#dplyr::filter(ONCOTREE_CODE %in% highCntsSamples$ONCOTREE_CODE) %>%
dplyr::filter(SAMPLE_TYPE %in% c("Primary","Metastasis")) %>%
dplyr::left_join(sampleTypeCnt,by=c("SAMPLE_TYPE")) %>%
dplyr::mutate(aaStr=paste0(Hugo_Symbol,"-",AAChange),
percPatientsMatched=100*round(n.patients.matched/n.patients,3),
patientsRestricted=paste0(n.patients.matched," (",percPatientsMatched,"%)")) %>%
dplyr::arrange(desc(percPatientsMatched)) %>%
data.frame() #%>%
AAChangePrimaryMetResistance$aaStr <- factor(AAChangePrimaryMetResistance$aaStr,
levels=unique(AAChangePrimaryMetResistance$aaStr))
outF <-  paste0(outDir,"/resistance_primary_met_perc_AA_change.pdf")
ggplot(AAChangePrimaryMetResistance,aes(y=aaStr,x=percPatientsMatched,fill=SAMPLE_TYPE))+
geom_bar(stat = "identity", position = "dodge",alpha=.6) +
theme_bw()+
#geom_text(aes(label = significance_str, y = value + 5))+
xlab("Resistance marker")+
xlab("percent of patients")+
#ggtitle(paste0("Restricted clinical annotation"))+
scale_fill_brewer(palette="Set4",drop=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 4)
#################################
### Secondary reporting table ###
#################################
# Computing actionable variant counts for different match approaches:
# 1) Unrestricted where no cancer type matching was imposed
# 2) Restricted with raw cancer type string matching
###
### join with observed variant table with clinically annotated - by genome position
genome.matched.unrestricted <- svCompiled %>%
dplyr::inner_join(dbRules,by=c("Chromosome"="chromosome_annotation",
"Start_Position"="pos",
"Reference_Allele"="ref",
"Tumor_Seq_Allele2"="alt")) %>%
dplyr::group_by(Chromosome,Start_Position,Tumor_Seq_Allele2) %>%
dplyr::summarize(n.patients.mutated=dplyr::n_distinct(Tumor_Sample_Barcode),
source=paste0(unique(source),collapse=";"),
Drugs=paste0(unique(Drugs),collapse=";"),
ReferenceOrTrialID=paste0(unique(ReferenceOrTrialID),collapse=";")) %>%
dplyr::arrange(desc(n.patients.mutated))
print(dim(genome.matched.unrestricted))
print(table(genome.matched.unrestricted$source,exclude = NULL))
### Unristricted match events - AA Change
aa.matched.unrestricted <- svCompiled %>%
dplyr::inner_join(dbRules,by=c("Hugo_Symbol"="gene",
"AAChangeObserved"="AAChange")) %>%
dplyr::group_by(Hugo_Symbol,AAChangeObserved) %>%
dplyr::summarize(n.patients.mutated=dplyr::n_distinct(Tumor_Sample_Barcode),
source=paste0(unique(source),collapse=";"),
Drugs=paste0(unique(Drugs),collapse=";"),
ReferenceOrTrialID=paste0(unique(ReferenceOrTrialID),collapse=";")) %>%
dplyr::arrange(desc(n.patients.mutated))
print(dim(aa.matched.unrestricted))
print(table(aa.matched.unrestricted$source,exclude = NULL))
### impose cancer type matches (genome) - oncotree
genome.matched.ot.restricted <- svCompiled %>%
dplyr::inner_join(dbRules,by=c("Chromosome"="chromosome_annotation",
"Start_Position"="pos",
"Reference_Allele"="ref",
"Tumor_Seq_Allele2"="alt",
"ONCOTREE_CODE"="oncotree_code_annotation")) %>%
dplyr::group_by(Chromosome,Start_Position,Tumor_Seq_Allele2,ONCOTREE_CODE) %>%
dplyr::summarize(n.patients.mutated=dplyr::n_distinct(Tumor_Sample_Barcode),
disease=paste0(unique(Disease),collapse=";"),
source=paste0(unique(source),collapse=";"),
Drugs=paste0(unique(Drugs),collapse=";"),
ReferenceOrTrialID=paste0(unique(ReferenceOrTrialID),collapse=";")) %>%
dplyr::arrange(desc(n.patients.mutated))
print(dim(genome.matched.unrestricted))
print(table(genome.matched.unrestricted$source,exclude = NULL))
### impose cancer type matches (protein) - oncotree
aa.matched.ot.restricted <- svCompiled %>%
dplyr::inner_join(dbRules,by=c("Hugo_Symbol"="gene",
"AAChangeObserved"="AAChange",
"ONCOTREE_CODE"="oncotree_code_annotation")) %>%
dplyr::group_by(Hugo_Symbol,AAChangeObserved,ONCOTREE_CODE) %>%
dplyr::summarize(n.patients.mutated=dplyr::n_distinct(Tumor_Sample_Barcode),
disease=paste0(unique(Disease),collapse=";"),
source=paste0(unique(source),collapse=";"),
Drugs=paste0(unique(Drugs),collapse=";"),
ReferenceOrTrialID=paste0(unique(ReferenceOrTrialID),collapse=";")) %>%
dplyr::arrange(desc(n.patients.mutated))
print(dim(aa.matched.unrestricted))
print(table(aa.matched.unrestricted$source,exclude = NULL))
### Build reporting table
n.patients <- length(unique(svCompiled$Tumor_Sample_Barcode))
n.variants <- length(unique(dbAlterations$AAChangeObserved))
c1 <- c("Restricted","Restricted","Unrestricted","Unrestricted")
c2 <- c("genome","AA change", "genome", "AA change")
c3 <- c(dim(genome.matched.ot.restricted)[[1]],
dim(aa.matched.ot.restricted)[[1]],
dim(genome.matched.unrestricted)[[1]],
dim(aa.matched.unrestricted)[[1]])
#c4 <- paste0(round(100*(c3/n.variants),1),"%")
c5 <- c(sum(genome.matched.ot.restricted$n.patients.mutated),
sum(aa.matched.ot.restricted$n.patients.mutated),
sum(genome.matched.unrestricted$n.patients.mutated),
sum(aa.matched.unrestricted$n.patients.mutated))
c6 <- paste0(round(100*(c5/n.patients),1),"%")
# Create a data frame
df <- data.frame(c1=c1, c2=c2, c3=c3, c5=c5, c6=c6)
colnames(df) <- c("Cancer type match restriction", "Cancer type matching approach", "number of variants","number of patients","percent of patients")
# Print the data frame
#print(df)
knitr::kable(df, )
write.csv(df,"../../output/actionability_db_curration_20231220/actionability_restricted_unrestricted_counts.csv")
##############################################
### mutant allele frequency (MAF) analysis ###
##############################################
iMafOver100 <- annotated.and.non.annotated$MAF > 100
outF <-  paste0(outDir,"/MAF_distribution_clinically_actionable_vs_non_actionable.pdf")
ggplot(annotated.and.non.annotated[!iMafOver100,],aes(x=MAF,fill=clinical_annotation_status))+
#geom_histogram(alpha=.4)+
geom_density(alpha=.4)+
theme_bw()+
facet_grid(SourceStudy~.,scale="free_y",)+
xlab("MAF (%)")+
ggtitle(paste0("MAF of unrestricted annotated and non-annotated variants \n in source studies"))+
scale_fill_brewer(palette="Set1",drop=FALSE)+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 8,width = 7)
### Examine MAF distributions ###
### select cancer type unrestricted data for evaluation
#data_for_evaluation <- aa.genome.representative
#MafOutDir <- paste0(outDir,"/MAF_analysis_unrestricted_cancer_types")
### select cancer type restricted data for evaluation
data_for_evaluation <- aa.genome.representative %>%
dplyr::filter(cancerTypeMatch==T)
MafOutDir <- paste0(outDir,"/MAF_analysis_restricted_cancer_types")
outF <-  paste0(MafOutDir,"/MAF_distribution_clinically_actionable.pdf")
ggplot(data_for_evaluation,aes(x=MAF,fill=actionability.summary))+
geom_histogram(alpha=.4)+
theme_bw()+
facet_grid(SourceStudy~.,scale="free_y",)+
xlab("MAF (%)")+
ggtitle(paste0("MAF of clinically actioanable variants \n in source studies"))+
scale_fill_brewer(palette="Set1",drop=FALSE)+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 10,width = 10)
outF <-  paste0(MafOutDir,"/MAF_distribution_clinically_actionable_type.pdf")
ggplot(data_for_evaluation,aes(x=MAF,fill=actionability.summary))+
geom_density(alpha=.4)+
theme_bw()+
facet_grid(SourceStudy~.,scale="free_y",)+
xlab("MAF (%)")+
ggtitle(paste0("MAF of clinically actioanable variants \n by type"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 10,width = 10)
isMetPrim <- data_for_evaluation$SAMPLE_TYPE %in% c("Metastasis","Primary")
isMC3 <- data_for_evaluation$SourceStudy == "TCGA-MC3-data"
met.or.primary <- data_for_evaluation[isMetPrim & !isMC3,]
### density plots of actionability type,met/primary, and data source
outF <-  paste0(MafOutDir,"/MAF_distribution_clinically_actionable_type_primary_met.pdf")
ggplot(met.or.primary,aes(x=MAF,fill=actionability.summary))+
geom_density(alpha=.4)+
theme_bw()+
#facet_grid(SourceStudy~SAMPLE_TYPE,scale="free_y",)+
facet_grid(SAMPLE_TYPE~SourceStudy,scale="free_y",)+
xlab("MAF (%)")+
ggtitle(paste0("MAF of clinically actioanable variants \n by type"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 10,width = 10)
outF <-  paste0(MafOutDir,"/MAF_distribution_met_vs_primary.pdf")
ggplot(met.or.primary,aes(x=MAF,fill=SAMPLE_TYPE))+
geom_density(alpha=.4)+
theme_bw()+
#facet_grid(SourceStudy~SAMPLE_TYPE,scale="free_y",)+
facet_grid(.~SourceStudy,scale="free_y",)+
xlab("MAF (%)")+
ggtitle(paste0("MAF of clinically actioanable variants \n by tissue type"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 10)
### create comparisons of distribution types
testResDf <- data.frame()
srcStudies <- unique(data_for_evaluation$SourceStudy)
#sampleTypes <- unique(data_for_evaluation$SAMPLE_TYPE)
sampleTypes <- c("Metastasis","Primary")
actionSummTypes <- unique(data_for_evaluation$actionability.summary)
for (testSource in srcStudies) {
print(testSource)
ixSrc <- data_for_evaluation$SourceStudy == testSource
for (xMetPrim in sampleTypes) {
ixMetPrim <- data_for_evaluation$SAMPLE_TYPE == xMetPrim
for (i in 1:(length(actionSummTypes) - 1)) {
for (j in (i + 1):length(actionSummTypes)) {
xAS <- actionSummTypes[i]
yAS <- actionSummTypes[j]
# conditions of test
ixActionSumm <- data_for_evaluation$actionability.summary == xAS
iyActionSumm <- data_for_evaluation$actionability.summary == yAS
xVarSubset <- data_for_evaluation[ixSrc & ixMetPrim & ixActionSumm,]
yVarSubset <- data_for_evaluation[ixSrc & ixMetPrim & iyActionSumm,]
print(dim(xVarSubset))
print(dim(yVarSubset))
xSize <- dim(xVarSubset)[[1]]
ySize <- dim(yVarSubset)[[1]]
# skip statsitical test if there are fewer than N exemplars in a given group
if ((xSize < 100) | (ySize < 100)) {
next
}
# create vectors of MAF values
xMAFVecTmp <- xVarSubset$MAF
yMAFVecTmp <- yVarSubset$MAF
ixNa <- is.na(xMAFVecTmp)
iyNa <- is.na(yMAFVecTmp)
ixInf <- is.infinite(xMAFVecTmp)
iyInf <- is.infinite(yMAFVecTmp)
# remove nulls and Inf from vectors
xMAFVec <- xMAFVecTmp[!ixNa & !ixInf]
yMAFVec <- yMAFVecTmp[!iyNa & !iyInf]
# Organize data for density plot
mafDf <- data.frame(value=c(xMAFVec,yMAFVec),
condition=xAS)
iC2 <- seq((length(xMAFVec)+1),dim(mafDf)[[1]])
mafDf[iC2,"condition"] <- yAS
#mafDf$condition <- factor(mafDf$condition)
ecdf1_data <- data.frame(x = unique(xMAFVec), y = ecdf(xMAFVec)(unique(xMAFVec)))
ecdf2_data <- data.frame(x = unique(yMAFVecTmp), y = ecdf(yMAFVecTmp)(unique(yMAFVecTmp)))
# Label the data
ecdf1_data$Condition <- xAS
ecdf2_data$Condition <- yAS
# Combine the data frames
ecdf_data <- rbind(ecdf1_data, ecdf2_data)
# Calculate the KS statistic and the point of maximum difference
ks_test <- ks.test(xMAFVec, yMAFVec)
ks_stat <- ks_test$statistic
xx <- seq(0,100,.1)
diffs <- abs(ecdf(xMAFVec)(xx) - ecdf(yMAFVec)(xx))
ks_value <- xx[which.max(diffs)]
# Plot the empirical CDFs using ggplot2
outF <-  paste0(MafOutDir,"/MAF_distributions_actionable_",xAS,"_",yAS,"_",xMetPrim,"_",testSource,"_ecdf.pdf")
ggplot(ecdf_data, aes(x = x, y = y, color = Condition)) +
geom_line() +
geom_vline(xintercept = ks_value, linetype = "dotted", color = "black", size = 1) +
annotate("text", x = ks_value, y = 0.5, label = paste("KS Statistic = ", round(ks_stat, digits=4)), hjust = 1.2) +
#scale_color_manual(values = c(xAS = 'blue', yAS = 'red')) +
labs(title = "Empirical CDFs with KS Statistic", x = "Value", y = "ECDF") +
theme_minimal()
ggsave(outF,height = 6,width = 6)
## density plot
outF <-  paste0(MafOutDir,"/MAF_distributions_actionable_",xAS,"_",yAS,"_",xMetPrim,"_",testSource,".pdf")
ggplot(mafDf,aes(x=value,fill=condition))+
geom_density(alpha=.4)+
theme_bw()+
geom_vline(xintercept = ks_value, linetype = "dotted", color = "black", size = 1)+
xlab("MAF (%)")+
ggtitle(paste0("MAF values in ",xMetPrim," tissue \n",testSource))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 6)
# perform wilcox test
wrs.twosided <- wilcox.test(xMAFVec,
yMAFVec,
alternative = "two.sided",
exact=FALSE,
conf.int=TRUE,
paired=FALSE)
## create outputs
c1_temp_summary <- summary(xMAFVec)
c2_temp_summary <- summary(yMAFVec)
# Create a row to append to the dataframe
new_row <- data.frame(
# condition info
source_study = testSource,
SampleType = xMetPrim,
c1_actionability_summary = xAS,
c2_actionability_summary = yAS,
c1_variant_count = xSize,
c2_variant_count = ySize,
# summary stats condition 1
c1_min = c1_temp_summary[[1]],
c1_first_quartile = c1_temp_summary[[2]],
c1_median = c1_temp_summary[[3]],
c1_mean = c1_temp_summary[[4]],
c1_third_quartile = c1_temp_summary[[5]],
c1_max = c1_temp_summary[[6]],
# summary stats condition 2
c2_min = c2_temp_summary[[1]],
c2_first_quartile = c2_temp_summary[[2]],
c2_median = c2_temp_summary[[3]],
c2_mean = c2_temp_summary[[4]],
c2_third_quartile = c2_temp_summary[[5]],
c2_max = c2_temp_summary[[6]],
# wilcox results
wilcox_p_value = wrs.twosided$p.value,
wilcox_statistic = wrs.twosided$statistic[[1]],
wilcox_estimate = wrs.twosided$estimate[[1]]
)
# Append the new row to the summary dataframe
testResDf <- rbind(testResDf, new_row)
}
}
}
}
# Apply FDR correction
testResDf$p_adjusted_wilcox <- p.adjust(testResDf$wilcox_p_value, method = "fdr")
testResDf <- testResDf %>%
dplyr::arrange(wilcox_p_value) %>%
dplyr::mutate(significant = p_adjusted_wilcox < 0.05,
c1_c2_median_MAF_difference = c1_median - c2_median)
outF <- paste0(MafOutDir,"/actionability_type_MAF_wilcox_test.csv")
write.csv(testResDf,outF)
### plot directionality of relationships and significance
outF <-  paste0(MafOutDir,"/MAF_distribution_wilcox_test_results.pdf")
ggplot(testResDf,aes(x=source_study,y=wilcox_estimate,shape=significant,color=SampleType))+
geom_point(alpha=.8)+
theme_bw()+
facet_grid(c1_actionability_summary~c2_actionability_summary,scale="free_y",)+
ylim(-8,8)+
geom_hline(yintercept = 0,linetype="dotted")+
ggtitle(paste0("Wilcox tests restults of MAF distributions \n by actionability type"))+
#scale_color_brewer(palette="Set1",drop=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 8,width = 7)
### plot wilcox estimate and median MAF difference
outF <-  paste0(MafOutDir,"/MAF_wilcox_estimate_and_median_diff.pdf")
ggplot(testResDf,aes(x=wilcox_estimate,y=c1_c2_median_MAF_difference,shape=significant,color=SampleType))+
geom_point(alpha=.8)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 5,width = 5)
### top variant summary
atGroupVariantSummary <- data_for_evaluation %>%
dplyr::group_by(actionability.summary,Hugo_Symbol,HGVSp_Short) %>%
dplyr::summarise(n=n()) %>%
dplyr::arrange(desc(n))
atGroupVariantSummaryTop <- atGroupVariantSummary %>%
dplyr::group_by(actionability.summary) %>%
dplyr::arrange(desc(n)) %>%
dplyr::filter(dplyr::row_number() < 16) %>%
dplyr::mutate(variantName=paste0(Hugo_Symbol," ",HGVSp_Short))
outF <-  paste0(MafOutDir,"/top_variants_by_actionability_type_unristricted.pdf")
ggplot(atGroupVariantSummaryTop,aes(x=actionability.summary,y=n))+
geom_point(alpha=.8)+
ggtitle(paste0("Top 15 variants by actionability type \n unrestricted cancer type"))+
#geom_text(aes(label = variantName), nudge_x = 0.0, nudge_y = 0.2)+
geom_text_repel(aes(label = variantName))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 9,width = 9)
outF <-  paste0(MafOutDir,"/top_variants_by_actionability_type_unristricted_log.pdf")
ggplot(atGroupVariantSummaryTop[atGroupVariantSummaryTop$n>1,],aes(x=actionability.summary,y=n))+
geom_point(alpha=.8)+
#geom_jitter(alpha=.8,width = .1)+
ggtitle(paste0("Top 15 variants by actionability type"))+
#geom_text(aes(label = variantName), nudge_x = 0.0, nudge_y = 0.2)+
geom_text_repel(aes(label = variantName))+
scale_y_log10(
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 9,width = 12)
table(data_for_evaluation$actionability.summary,data_for_evaluation$cancerTypeMatch)
#####################################
### sequencing or report to death ###
#####################################
# compare GENIE to Hartwig
outF <-  paste0(outDir,"/hartwig_vs_aacr_time_to_death.pdf")
ggplot(sampleInfoCompiled,aes(x=INT_Seq_or_Biopsy_To_Death,fill=SourceStudy))+
geom_density(alpha=.4)+
theme_bw()+
xlim(-500,2000)+
ggtitle(paste0("Infered days between biopsy or sequencing \nreport and death"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 6)
outF <-  paste0(outDir,"/hartwig_vs_aacr_time_to_death_sample_type.pdf")
iMetPrim = (sampleInfoCompiled$SAMPLE_TYPE=="Primary" | sampleInfoCompiled$SAMPLE_TYPE=="Metastasis") & !is.na(sampleInfoCompiled$SAMPLE_TYPE)
ggplot(sampleInfoCompiled[iMetPrim,],aes(x=INT_Seq_or_Biopsy_To_Death,fill=SourceStudy))+
geom_density(alpha=.4)+
facet_grid(SAMPLE_TYPE~.)+
theme_bw()+
xlim(-500,2000)+
ggtitle(paste0("Infered days between biopsy or sequencing \nreport and death"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 6)
### prognostic
iPrognosticSubset <- aa.genome.representative$actionability.summary == "Prognostic" &  aa.genome.representative$cancerTypeMatch == T
prognosticRepVars <- aa.genome.representative[iPrognosticSubset,]
# which samples have a prognostic marker: high conf, low, conf
prognosticRepCnts <- aa.genome.representative %>%
dplyr::group_by(Tumor_Sample_Barcode) %>%
dplyr::summarise(nVariants=n(),
nPrognosticVars=sum(actionability.summary == "Prognostic"),
nPrognosticHighConfVars=sum((actionability.summary == "Prognostic") & (clinical.evidence.summary=="High Confidence")),
nPrognosticLowConfVarssum=sum((actionability.summary == "Prognostic") & (clinical.evidence.summary=="Lower Confidence")))
### to-do: direction needed for prognostic prediction
iProgMarkers <- prognosticRepCnts$nPrognosticVars > 0
sampleInfoCompiled$hasPrognosticMarker <- sampleInfoCompiled$SAMPLE_ID %in% prognosticRepCnts[iProgMarkers,"Tumor_Sample_Barcode"][[1]]
outF <-  paste0(outDir,"/hartwig_vs_aacr_time_to_death_sample_type.pdf")
iMetPrim = (sampleInfoCompiled$SAMPLE_TYPE=="Primary" | sampleInfoCompiled$SAMPLE_TYPE=="Metastasis") & !is.na(sampleInfoCompiled$SAMPLE_TYPE) & !is.na(sampleInfoCompiled$INT_Seq_or_Biopsy_To_Death)
ggplot(sampleInfoCompiled[iMetPrim,],aes(x=INT_Seq_or_Biopsy_To_Death,fill=hasPrognosticMarker))+
geom_density(alpha=.4)+
facet_grid(SourceStudy~.)+
theme_bw()+
xlim(-500,2000)+
ggtitle(paste0("Infered days between biopsy or sequencing \nreport and death"))+
theme(plot.title = element_text(hjust = 0.5))
ggsave(outF,height = 6,width = 6)
install.packages("ggalluvial")
library(ggalluvial)
data <- data.frame(
id = 1:4,
stage1 = c("A", "A", "B", "B"),
stage2 = c("C", "D", "D", "C"),
weight = c(1, 2, 1, 1)
)
ggplot(data = data,
aes(axis1 = stage1, axis2 = stage2, y = weight)) +
geom_alluvium(aes(fill = stage1)) +  # Fill color based on the first stage
geom_stratum() +  # Add stratum to show stages
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +  # Add text labels
theme_minimal() +  # Use a minimal theme
ggtitle("Sankey Diagram with ggalluvial")  # Add a title
data <- data.frame(
id = 1:4,
stage1 = c("A", "A", "B", "B"),
stage2 = c("C", "D", "D", "C"),
stage3 = c("E", "E", "F", "F"),
weight = c(1, 2, 1, 1)
)
ggplot(data = data,
aes(axis1 = stage1, axis2 = stage2, axis3 = stage3, y = weight)) +
geom_alluvium(aes(fill = stage1)) +  # Fill color based on the first stage
geom_stratum() +  # Add stratum to show stages
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 3) +  # Add text labels
theme_minimal() +  # Use a minimal theme
ggtitle("Sankey Diagram with Three Stages")  # Add a title
head(aa.genome.representative)
table(aa.genome.representative$SourceStudy)
table(aa.genome.representative$cancerTypeMatch)
table(aa.genome.exahustive$SourceStudy)
table(aa.genome.exahustive)
table(aa.genome.exahustive$SourceStudy)
table(svCompiled$SourceStudy)
table(poVariants$SourceStudy)
table(sampleInfoCompiled$SourceStudy)
inFile <- "../../data/Hartwig/data/output_v4/hartwig_clinically_actionable_pcgr_entries.txt"
hartwig.pcgr <- read.csv(inFile,sep="\t")
dim(hartwig.pcgr)
head(hartwig.pcgr)
colnames(genie) %in% colnames(hartwig.pcgr)
inFile <- "../../data/MSK_IMPACT/impact_2017_annotated_per_variant.tsv"
msk <- read.csv(inFile,sep="\t")
msk$MAF <- 100*(msk$t_alt_count / (msk$t_ref_count+msk$t_alt_count))
colnames(msk) %in% colnames(hartwig.pcgr)
quit()
